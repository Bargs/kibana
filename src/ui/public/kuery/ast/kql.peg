// Initialization block
{
  const { nodeTypes } = options.helpers;
  const buildFunctionNode = nodeTypes.function.buildNodeWithArgumentNodes;
  const buildLiteralNode = nodeTypes.literal.buildNode;
  const buildNamedArgNode = nodeTypes.namedArg.buildNode;
}

start
  = OrQuery
  / EmptyQuery

EmptyQuery
  = Space* {
    return buildFunctionNode('and', []);
  }

OrQuery
  = left:AndQuery Or right:OrQuery {
    return buildFunctionNode('or', [left, right]);
  }
  / AndQuery

AndQuery
  = left:NotQuery And right:AndQuery{
    return buildFunctionNode('and', [left, right]);
  }
  / NotQuery

NotQuery
  = Not query:SubQuery {
    return buildFunctionNode('not', [query]);
  }
  / SubQuery

SubQuery
  = '(' Space* query:OrQuery Space* ')' { return query; }
  / Expression

Expression
  = FieldRangeExpression
  / FieldValueExpression
  / ValueExpression

FieldRangeExpression
  = field:Literal Space* operator:RangeOperator Space* value:Literal {
    const range = buildNamedArgNode(operator, value);
    return buildFunctionNode('range', [field, range]);
  }

FieldValueExpression
  = field:Literal Space* ':' Space* partial:ListOfValues {
    return partial(field);
  }

ValueExpression
  = partial:Value {
    const field = buildLiteralNode(null);
    return partial(field);
  }

ListOfValues
  = '(' Space* partial:OrListOfValues Space* ')' { return partial; }
  / Value

OrListOfValues
  = partialLeft:AndListOfValues Or partialRight:OrListOfValues {
    return (field) => buildFunctionNode('or', [partialLeft(field), partialRight(field)]);
  }
  / AndListOfValues

AndListOfValues
  = partialLeft:NotListOfValues And partialRight:AndListOfValues {
    return (field) => buildFunctionNode('and', [partialLeft(field), partialRight(field)]);
  }
  / NotListOfValues

NotListOfValues
  = Not partial:ListOfValues {
    return (field) => buildFunctionNode('not', [partial(field)]);
  }
  / ListOfValues

Value
  = value:QuotedString {
    const isPhrase = buildLiteralNode(true);
    return (field) => buildFunctionNode('is', [field, value, isPhrase]);
  }
  / value:UnquotedLiteral {
    const isPhrase = buildLiteralNode(false);
    return (field) => buildFunctionNode('is', [field, value, isPhrase]);
  }

Or
  = Space+ 'or'i Space+

And
  = Space+ 'and'i Space+

Not
  = 'not'i Space+

Literal
  = QuotedString / UnquotedLiteral

QuotedString
  = '"' chars:(EscapedSpecialCharacter / [^"])* '"' {
    return buildLiteralNode(chars.join(''));
  }

UnquotedLiteral
  = chars:UnquotedCharacter+ {
    const sequence = chars.join('').trim();
    if (sequence === 'null') return buildLiteralNode(null);
    if (sequence === 'true') return buildLiteralNode(true);
    if (sequence === 'false') return buildLiteralNode(false);
    const number = Number(sequence);
    const value = isNaN(number) ? sequence : number;
    return buildLiteralNode(value);
  }

UnquotedCharacter
  = EscapedSpecialCharacter
  / !Separator char:. { return char; }

EscapedSpecialCharacter
  = '\\' char:SpecialCharacter { return char; }

Separator
  = Keyword / SpecialCharacter

Keyword
  = Or / And / Not

SpecialCharacter
  = [():<>"]

RangeOperator
  = '<=' { return 'lte'; }
  / '>=' { return 'gte'; }
  / '<' { return 'lt'; }
  / '>' { return 'gt'; }

Space
  = [\ \t\r\n]
